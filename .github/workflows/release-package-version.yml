# Unique name for this workflow
name: Release Package Version

# Workflow starts when receiving release-package-version-event custom event
# Event contains the packageName of the target package for which a new version will be released
on:
    repository_dispatch:
        types: [release-package-version-event]

# Jobs to be executed
jobs:
    release-package-version:
        runs-on: ubuntu-latest
        steps:
            # Install Salesforce CLI
            - name: Install Salesforce CLI
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                  mkdir sfdx-cli
                  tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                  ./sfdx-cli/install

            # Checkout the source code
            - name: Checkout source code
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.client_payload.ref }}

            # Store secret for dev hub
            - name: Populate auth file with DEVHUB_SFDX_URL secret
              shell: bash
              run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

            # Authenticate dev hub
            - name: Authenticate Dev Hub
              run: sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Remove auth file
            - name: Remove auth file
              run: rm -f ./DEVHUB_SFDX_URL.txt

            # Add namespace to project config
            - name: Add namespace to project config
              run: |
                  sed -i 's,"namespace": "","namespace": "autocomp",' sfdx-project.json

            # Create package version and extract its id
            - name: Create package version
              id: create-package-version
              run: |
                  set +e
                  packageName="${{ github.event.client_payload.packageName }}"
                  json=$(sfdx force:package:version:create -c -p "$packageName" -x -w 20 -f config/project-scratch-def.json --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq '.result.SubscriberPackageVersionId')
                      echo "::set-output name=packageVersionId::$packageVersionId"
                  else
                      echo "sfdx force:package:version:create failed"
                  fi
                  exit $status

            # Wait for package replication
            - name: Wait for package replication
              uses: maddox/actions/sleep@master
              with:
                  args: 360

            # Create scratch org
            - name: Create scratch org
              run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1

            # Install new package in scratch org
            - name: Install new package version in scratch org
              run: sfdx force:package:install --package ${{ steps.create-package-version.outputs.packageVersionId }} -w 10 -u scratch-org -r

            # Update package install link in readme
            - name: Update package install link in readme
              run: |
                  packageName="${{ github.event.client_payload.packageName }}"
                  packageVersionId="${{ steps.create-package-version.outputs.packageVersionId }}"
                  packageLinkRegex="<a name=\"$packageName\" href=\"https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-ZA-ZA-Z0-9]{18}\">"
                  newPackageLink="<a name=\"${packageName}\" href=\"https://login.salesforce.com/packaging/installPackage.apexp?p0=${packageVersionId}\">"
                  sed -E -i "s,${packageLinkRegex},${newPackageLink}," README.md

            # Promote package version
            - name: Promote package version
              run: sfdx force:package:version:promote --package ${{ steps.create-package-version.outputs.packageVersionId }} -n

            # Remove namespace from project config
            - name: Remove namespace from project config
              run: |
                  sed -i 's,"namespace": "autocomp","namespace": "",' sfdx-project.json

            # Commit project config and readme
            - name: Commit project config and readme
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add sfdx-project.json
                  git add README.md
                  git commit -m "Released new package version"

            # Push changes in git
            - name: Push changes in git
              uses: ad-m/github-push-action@master
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}

            # Housekeeping
            - name: Delete scratch org
              if: always()
              run: sfdx force:org:delete -p -u scratch-org
