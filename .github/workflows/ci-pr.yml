# Unique name for this workflow
name: CI on PR

# Definition when the workflow should run
on:
    workflow_dispatch:
        inputs:
            prerelease:
                description: 'Run on a prerelease org?'
                required: false
                type: boolean
    pull_request:
        types: [opened, edited, synchronize, reopened]
        branches-ignore:
            - auto/package-version*

# Workflow environment variables
env:
    # Is the PR base branch a prerelease branch
    IS_PRERELEASE: ${{ startsWith(github.event.pull_request.base.ref, 'prerelease/') || inputs.prerelease }}

# Jobs to be executed
jobs:
    # Dummy job used to skip CI run on automated PRs
    skip-ci:
        if: github.actor == 'trailheadapps-bot'
        runs-on: trailheadapps-Ubuntu
        steps:
            - name: Noop
              run: |
                  echo "Skipping CI run for automated PRs."

    # Formatting, linting and LWC tests only runs on human-submitted PRs
    format-lint-lwc-tests:
        if: github.actor != 'trailheadapps-bot'
        runs-on: trailheadapps-Ubuntu
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4

            # Install Volta to enforce proper node and package manager versions
            - name: 'Install Volta'
              uses: volta-cli/action@v4

            # Cache node_modules to speed up the process
            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: HUSKY=0 npm ci

            # Prettier formatting
            # For 10x performance gain, replace this with prettier:verify:apex:local
            # (not allowed in our custom self-hosted GitHub Actions runner)
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify

            # Lint LWC / Aura
            - name: 'Lint Lightning Web Components / Aura Components'
              run: npm run lint

            # LWC unit tests
            - name: 'Unit test Lightning Web Components'
              run: npm run test:unit:coverage

            # Upload code coverage data
            - name: 'Upload code coverage for LWC to Codecov.io'
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: LWC

    # Auto merge Dependabot PRs for:
    # - patch updates on prod dependencies
    # - minor updates on dev dependencies
    dependabot-auto-merge:
        # Only run for Dependabot PRs
        if: github.actor == 'dependabot[bot]'
        runs-on: trailheadapps-Ubuntu
        needs: format-lint-lwc-tests
        permissions:
            pull-requests: write
            contents: write
        steps:
            - name: 'Fetch Dependabot metadata'
              id: dependabot
              uses: dependabot/fetch-metadata@v2

            - name: 'Check auto merge conditions'
              id: auto-merge
              if: |
                  (
                    steps.dependabot.outputs.update-type == 'version-update:semver-patch' &&
                    contains('direct:production,indirect:production', steps.dependabot.outputs.dependency-type)
                  ) || (
                    contains('version-update:semver-minor,version-update:semver-patch', steps.dependabot.outputs.update-type) &&
                    contains('direct:development,indirect:development', steps.dependabot.outputs.dependency-type)
                  )
              run: echo "::notice ::auto-merge conditions satisfied"

            - name: 'Approve and merge PR'
              if: steps.auto-merge.conclusion == 'success'
              run: |
                  gh pr review --approve "$PR_URL"
                  gh pr merge --auto --rebase "$PR_URL"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  PR_URL: ${{ github.event.pull_request.html_url }}

    scratch-org-test:
        runs-on: trailheadapps-Ubuntu
        needs: format-lint-lwc-tests
        if: github.actor != 'dependabot[bot]'
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4

            # Run PMD scan
            - name: 'Run PMD scan'
              uses: pmd/pmd-github-action@v2.0.0
              id: pmd
              with:
                  version: '6.55.0'
                  rulesets: 'ruleset.xml'

            # Check for PMD violations
            - name: 'Check for PMD violations'
              if: steps.pmd.outputs.violations != 0
              run: exit 1

            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Add namespace to project config
            - name: 'Add namespace to project config'
              run: |
                  sed -i 's,"namespace": "","namespace": "autocomp",' sfdx-project.json

            # Add namespace to CPEs
            - name: 'Add namespace to Custom Property Editors'
              run: |
                  find . -type f -name "*.js-meta.xml" -print0 | xargs -0 sed -i 's,configurationEditor="c-,configurationEditor="autocomp-,'

            # Create prerelease scratch org
            - name: 'Create prerelease scratch org'
              if: ${{ env.IS_PRERELEASE }}
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1 -c --release=preview

            # Create scratch org
            - name: 'Create scratch org'
              if: ${{ !env.IS_PRERELEASE }}
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1 -c

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: sf project deploy start

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: sf apex test run -c -r human -d ./tests/apex -w 20

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: Apex

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sf org delete scratch -p -o scratch-org
