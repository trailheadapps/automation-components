# Unique name for this workflow
name: Salesforce DX PR (scratch org)

# Definition when the workflow should run
on:
    pull_request:
        types: [opened, edited, synchronize, reopened]
        branches-ignore:
            - prerelease/spring[2-9][0-9]
            - prerelease/summer[2-9][0-9]
            - prerelease/winter[2-9][0-9]
            - auto/package-version*

# Jobs to be executed
jobs:
    # Dummy job used to skip CI run on automated PRs
    skip-ci:
        if: "github.actor == 'trailheadapps-bot'"
        runs-on: ubuntu-latest
        steps:
            - name: Noop
              run: |
                  echo "Skipping CI run for automated PRs."

    # Formatting and linting only runs on human-submitted PRs
    formatting-and-linting:
        if: "github.actor != 'trailheadapps-bot'"
        runs-on: ubuntu-latest
        steps:
            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Cache node_modules to speed up the process
            - name: Restore node_modules cache
              id: cache-npm
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: npm ci

            # Start local Apex parser server for Prettier
            - name: 'Start local Apex parser server for Prettier'
              run: npm run apex:local:start &

            # Wait for Apex parser server startup
            - name: Wait for Apex parser server startup
              uses: maddox/actions/sleep@master
              with:
                  args: 5

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify:apex:local

            # Stop local Apex parser server for Prettier
            - name: 'Stop local Apex parser server for Prettier'
              if: always()
              run: npm run apex:local:stop

            # Lint LWC
            - name: 'Lint Lightning Web Components'
              run: npm run lint:lwc

            # Lint Aura
            - name: 'Lint Aura components'
              run: 'npm run lint:aura'

            # LWC unit tests
            - name: 'Unit test Lightning Web Components'
              run: npm run test:unit:coverage

            # Upload code coverage data
            - name: 'Upload code coverage for LWC to Codecov.io'
              uses: codecov/codecov-action@v1
              with:
                  flags: LWC

    scratch-org-test:
        runs-on: ubuntu-latest
        needs: formatting-and-linting
        steps:
            # Install Salesforce CLI
            - name: Install Salesforce CLI
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                  mkdir sfdx-cli
                  tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                  ./sfdx-cli/install

            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: 'sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d'

            # Create scratch org
            - name: 'Create scratch org'
              run: 'sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1'

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: 'sfdx force:source:push'

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: 'sfdx force:apex:test:run -c -r human -d ./tests/apex -w 20'

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v1
              with:
                  flags: Apex

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: 'sfdx force:org:delete -p -u scratch-org'
