# Unique name for this workflow
name: Packaging

# Workflow starts when receiving start-packaging custom event
# Event contains the packageName of the target package for which a new version will be released
on:
    repository_dispatch:
        types: [start-packaging]

# Jobs to be executed
jobs:
    release-package-version:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                package: ${{ github.event.client_payload.packageNames }}
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                  mkdir sfdx-cli
                  tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                  ./sfdx-cli/install

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.client_payload.ref }}

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Remove auth file
            - name: 'Remove auth file'
              run: rm -f ./DEVHUB_SFDX_URL.txt

            # Add namespace to project config
            - name: 'Add namespace to project config'
              run: |
                  sed -i 's,"namespace": "","namespace": "autocomp",' sfdx-project.json

            # Add namespace to CPEs
            - name: 'Add namespace to Custom Property Editors'
              run: |
                  find . -type f -name "*.js-meta.xml" -print0 | xargs -0 sed -i 's,configurationEditor="c-,configurationEditor="autocomp-,'

            # Create package version and extract its id
            - name: 'Create package version'
              id: createPackageVersion
              run: |
                  set +e
                  packageName="${{ matrix.package }}"
                  json=$(sfdx force:package:version:create -c -p "$packageName" -x -w 20 -f config/project-scratch-def.json --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "::set-output name=packageVersionId::$packageVersionId"
                  else
                      echo "sfdx force:package:version:create failed"
                  fi
                  exit $status

            # Wait for package replication
            - name: 'Wait for package replication'
              uses: maddox/actions/sleep@master
              with:
                  args: 360

            # Create scratch org
            - name: 'Create scratch org'
              run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1 --nonamespace -c

            # Install new package in scratch org
            - name: 'Install new package version in scratch org'
              run: sfdx force:package:install --package ${{ steps.createPackageVersion.outputs.packageVersionId }} -w 10 -u scratch-org -r

            # Update package install link in readme
            - name: 'Update package install link in readme'
              run: |
                  packageName="${{ matrix.package }}"
                  packageVersionId="${{ steps.createPackageVersion.outputs.packageVersionId }}"
                  packageLinkRegex="<a name=\"$packageName\" href=\"https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-ZA-ZA-Z0-9]{18}\">"
                  newPackageLink="<a name=\"${packageName}\" href=\"https://login.salesforce.com/packaging/installPackage.apexp?p0=${packageVersionId}\">"
                  sed -E -i "s,${packageLinkRegex},${newPackageLink}," README.md

            # Promote package version
            - name: 'Promote package version'
              run: sfdx force:package:version:promote --package ${{ steps.createPackageVersion.outputs.packageVersionId }} -n

            # Revert namespace change in project config
            - name: 'Revert namespace change in project config'
              run: |
                  sed -i 's,"namespace": "autocomp","namespace": "",' sfdx-project.json

            # Revert namespace changes in CPEs
            - name: 'Revert namespace changes in Custom Property Editors'
              run: git checkout **/*.js-meta.xml

            # Create PR for new package version
            - name: 'Create PR for new package version'
              id: create-pr
              uses: peter-evans/create-pull-request@v3
              with:
                  title: 'Package: ${{ matrix.package }} - New version: ${{ steps.createPackageVersion.outputs.packageVersionId }}'
                  body: 'Released new package version ${{ steps.createPackageVersion.outputs.packageVersionId }} for package ${{ matrix.package }}'
                  author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
                  commit-message: 'Package: ${{ matrix.package }} - New version: ${{ steps.createPackageVersion.outputs.packageVersionId }}'
                  branch: 'auto/package-version-${{ steps.createPackageVersion.outputs.packageVersionId }}'
                  token: ${{ secrets.BOT_ACCESS_TOKEN }}

            # Approve pull request
            - name: 'Approve Pull Request'
              uses: juliangruber/approve-pull-request-action@v1
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  number: ${{ steps.create-pr.outputs.pull-request-number }}

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sfdx force:org:delete -p -u scratch-org
