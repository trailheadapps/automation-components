# Unique name for this workflow
name: Salesforce DX (scratch org)

# Definition when the workflow should run
on:
    push:
        branches:
            - master
        paths-ignore:
            - 'sfdx-project.json'
            - 'README.md'

# Jobs to be executed
jobs:
    formatting-and-linting:
        runs-on: ubuntu-latest
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Cache node_modules to speed up the process
            - name: Restore node_modules cache
              id: cache-npm
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: npm ci

            # Start local Apex parser server for Prettier
            - name: 'Start local Apex parser server for Prettier'
              run: npm run apex:local:start &

            # Wait for Apex parser server startup
            - name: Wait for Apex parser server startup
              run: timeout 22 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' 127.0.0.1 2117

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify:apex:local

            # Stop local Apex parser server for Prettier
            - name: 'Stop local Apex parser server for Prettier'
              if: always()
              run: npm run apex:local:stop

            # Lint LWC
            - name: 'Lint Lightning Web Components'
              run: npm run lint:lwc

            # Lint Aura
            - name: 'Lint Aura components'
              run: 'npm run lint:aura'

            # LWC unit tests
            - name: 'Unit test Lightning Web Components'
              run: npm run test:unit:coverage

            # Upload code coverage data
            - name: 'Upload code coverage for LWC to Codecov.io'
              uses: codecov/codecov-action@v1
              with:
                  flags: LWC

    scratch-org-test:
        runs-on: ubuntu-latest
        needs: formatting-and-linting
        steps:
            # Install Salesforce CLI
            - name: Install Salesforce CLI
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                  mkdir sfdx-cli
                  tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                  ./sfdx-cli/install

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: 'sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d'

            # Add namespace to project config
            - name: Add namespace to project config
              run: |
                  sed -i 's,"namespace": "","namespace": "autocomp",' sfdx-project.json

            # Add namespace to CPEs
            - name: Add namespace to Custom Property Editors
              run: |
                  find . -type f -name "*.js-meta.xml" -print0 | xargs -0 sed -i 's,configurationEditor="c-,configurationEditor="autocomp-,'

            # Create scratch org
            - name: 'Create scratch org'
              run: 'sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1'

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: 'sfdx force:source:push'

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: 'sfdx force:apex:test:run -c -r human -d ./tests/apex -w 20'

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v1
              with:
                  flags: Apex

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: 'sfdx force:org:delete -p -u scratch-org'

    trigger-packaging:
        runs-on: ubuntu-latest
        needs: scratch-org-test
        steps:
            # Checkout the source code with history
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Check for package changes using git diff
            - name: Check for package changes
              id: checkForChanges
              run: |
                  git fetch origin ${{ github.event.before }} --depth=1
                  changedPaths=$( git diff-tree --name-only ${{ github.event.before }} $GITHUB_SHA )

                  set +e
                  changedPackages=()

                  if [ $(echo "$changedPaths" | grep -c '^src-apex-formula-evaluator$') == 1 ]; then
                      changedPackages+=( 'AC - Apex Formula Evaluator' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^src-collections$') == 1 ]; then
                      changedPackages+=( 'AC - Collections' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^src-data$') == 1 ]; then
                      changedPackages+=( 'AC - Data' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^src-flows$') == 1 ]; then
                      changedPackages+=( 'AC - Flows' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^src-messaging$') == 1 ]; then
                      changedPackages+=( 'AC - Messaging' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^src-security$') == 1 ]; then
                      changedPackages+=( 'AC - Security' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^src-strings$') == 1 ]; then
                      changedPackages+=( 'AC - Strings' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^src-ui$') == 1 ]; then
                      changedPackages+=( 'AC - UI' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^src-utilities$') == 1 ]; then
                      changedPackages+=( 'AC - Utilities' )
                  fi

                  echo "Changed packages (${#changedPackages[@]}):"
                  for i in ${changedPackages[@]}; do
                      echo "- $i"
                  done

                  changedPackagesJson='[]'
                  if (( ${#changedPackages[@]} > 0 )); then
                      changedPackagesJson=$(printf '%s\n' "${changedPackages[@]}" | jq -R . | jq -c -s .)
                  fi
                  echo "::set-output name=changes::$changedPackagesJson"

            # Trigger packaging workflow if needed
            - name: 'Trigger packaging workflow if needed'
              uses: peter-evans/repository-dispatch@v1.1.0
              if: ${{ steps.checkForChanges.outputs.changes != '[]' }}
              with:
                  token: ${{ secrets.REPO_ACCESS_TOKEN }}
                  event-type: release-package-version-event
                  client-payload: '{ "ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "packageNames": ${{ steps.checkForChanges.outputs.changes }} }'
